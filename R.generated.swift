//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 10 storyboards.
  struct storyboard {
    /// Storyboard `AddDataStoryboard`.
    static let addDataStoryboard = _R.storyboard.addDataStoryboard()
    /// Storyboard `AddPhotoStoryboard`.
    static let addPhotoStoryboard = _R.storyboard.addPhotoStoryboard()
    /// Storyboard `DetailedPhotoStoryboard`.
    static let detailedPhotoStoryboard = _R.storyboard.detailedPhotoStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainGalleryStoryboard`.
    static let mainGalleryStoryboard = _R.storyboard.mainGalleryStoryboard()
    /// Storyboard `RootStoryboard`.
    static let rootStoryboard = _R.storyboard.rootStoryboard()
    /// Storyboard `SignInStoryboard`.
    static let signInStoryboard = _R.storyboard.signInStoryboard()
    /// Storyboard `SignUp`.
    static let signUp = _R.storyboard.signUp()
    /// Storyboard `UserProfileStoryboard`.
    static let userProfileStoryboard = _R.storyboard.userProfileStoryboard()
    /// Storyboard `WelcomeStoryboard`.
    static let welcomeStoryboard = _R.storyboard.welcomeStoryboard()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddDataStoryboard", bundle: ...)`
    static func addDataStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addDataStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddPhotoStoryboard", bundle: ...)`
    static func addPhotoStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addPhotoStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DetailedPhotoStoryboard", bundle: ...)`
    static func detailedPhotoStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailedPhotoStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainGalleryStoryboard", bundle: ...)`
    static func mainGalleryStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainGalleryStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RootStoryboard", bundle: ...)`
    static func rootStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.rootStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignInStoryboard", bundle: ...)`
    static func signInStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signInStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignUp", bundle: ...)`
    static func signUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUp)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "UserProfileStoryboard", bundle: ...)`
    static func userProfileStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userProfileStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "WelcomeStoryboard", bundle: ...)`
    static func welcomeStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.welcomeStoryboard)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 18 images.
  struct image {
    /// Image `Bear`.
    static let bear = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bear")
    /// Image `Camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera")
    /// Image `ErrorIcon`.
    static let errorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ErrorIcon")
    /// Image `Field`.
    static let field = Rswift.ImageResource(bundle: R.hostingBundle, name: "Field")
    /// Image `Flower`.
    static let flower = Rswift.ImageResource(bundle: R.hostingBundle, name: "Flower")
    /// Image `Fog`.
    static let fog = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fog")
    /// Image `Forest`.
    static let forest = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forest")
    /// Image `Home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `PhotoIcon-1`.
    static let photoIcon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "PhotoIcon-1")
    /// Image `Photo`.
    static let photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Photo")
    /// Image `User`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "User")
    /// Image `calendarIcon`.
    static let calendarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendarIcon")
    /// Image `emailIcon`.
    static let emailIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "emailIcon")
    /// Image `eyeIcon`.
    static let eyeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeIcon")
    /// Image `logo1`.
    static let logo1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo1")
    /// Image `photoIcon`.
    static let photoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoIcon")
    /// Image `userIcon`.
    static let userIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "userIcon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bear", bundle: ..., traitCollection: ...)`
    static func bear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ErrorIcon", bundle: ..., traitCollection: ...)`
    static func errorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.errorIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Field", bundle: ..., traitCollection: ...)`
    static func field(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.field, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Flower", bundle: ..., traitCollection: ...)`
    static func flower(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flower, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Fog", bundle: ..., traitCollection: ...)`
    static func fog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Forest", bundle: ..., traitCollection: ...)`
    static func forest(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forest, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Photo", bundle: ..., traitCollection: ...)`
    static func photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PhotoIcon-1", bundle: ..., traitCollection: ...)`
    static func photoIcon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoIcon1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "User", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendarIcon", bundle: ..., traitCollection: ...)`
    static func calendarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emailIcon", bundle: ..., traitCollection: ...)`
    static func emailIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emailIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeIcon", bundle: ..., traitCollection: ...)`
    static func eyeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo1", bundle: ..., traitCollection: ...)`
    static func logo1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photoIcon", bundle: ..., traitCollection: ...)`
    static func photoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userIcon", bundle: ..., traitCollection: ...)`
    static func userIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userIcon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ImageCell`.
    static let imageCell: Rswift.ReuseIdentifier<GalleryPhotoCell> = Rswift.ReuseIdentifier(identifier: "ImageCell")
    /// Reuse identifier `PhotoViewCell`.
    static let photoViewCell: Rswift.ReuseIdentifier<PhotoCell> = Rswift.ReuseIdentifier(identifier: "PhotoViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.scenes` struct is generated, and contains static references to 13 localization keys.
    struct scenes {
      /// Value: Birthday
      static let dateOfBirth = Rswift.StringResource(key: "dateOfBirth", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm password
      static let confirmPassword = Rswift.StringResource(key: "confirmPassword", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: E-mail
      static let email = Rswift.StringResource(key: "email", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error
      static let error = Rswift.StringResource(key: "error", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Name
      static let name = Rswift.StringResource(key: "name", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let okAction = Rswift.StringResource(key: "okAction", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password
      static let password = Rswift.StringResource(key: "password", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Passwords aren't identical
      static let passwordsNotMatch = Rswift.StringResource(key: "passwordsNotMatch", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Phone number
      static let phoneNumber = Rswift.StringResource(key: "phoneNumber", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let save = Rswift.StringResource(key: "save", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Surname
      static let surname = Rswift.StringResource(key: "surname", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: User Name
      static let username = Rswift.StringResource(key: "username", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You didn't fill all required fields
      static let emptyFieldsMessage = Rswift.StringResource(key: "emptyFieldsMessage", tableName: "Scenes", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Birthday
      static func dateOfBirth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dateOfBirth", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "dateOfBirth"
        }

        return NSLocalizedString("dateOfBirth", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Confirm password
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirmPassword", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "confirmPassword"
        }

        return NSLocalizedString("confirmPassword", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: E-mail
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Error
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Name
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: OK
      static func okAction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("okAction", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "okAction"
        }

        return NSLocalizedString("okAction", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Password
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Passwords aren't identical
      static func passwordsNotMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordsNotMatch", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "passwordsNotMatch"
        }

        return NSLocalizedString("passwordsNotMatch", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Phone number
      static func phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phoneNumber", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "phoneNumber"
        }

        return NSLocalizedString("phoneNumber", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Save
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: Surname
      static func surname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("surname", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "surname"
        }

        return NSLocalizedString("surname", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: User Name
      static func username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("username", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "username"
        }

        return NSLocalizedString("username", tableName: "Scenes", bundle: bundle, comment: "")
      }

      /// Value: You didn't fill all required fields
      static func emptyFieldsMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyFieldsMessage", tableName: "Scenes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Scenes", preferredLanguages: preferredLanguages) else {
          return "emptyFieldsMessage"
        }

        return NSLocalizedString("emptyFieldsMessage", tableName: "Scenes", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try addDataStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try addPhotoStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try detailedPhotoStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainGalleryStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try rootStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signInStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signUp.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try userProfileStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try welcomeStoryboard.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct addDataStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AddDataViewController

      let bundle = R.hostingBundle
      let name = "AddDataStoryboard"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "photo") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'photo' is used in storyboard 'AddDataStoryboard', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct addPhotoStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AddPhotoViewController

      let bundle = R.hostingBundle
      let name = "AddPhotoStoryboard"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "photo") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'photo' is used in storyboard 'AddPhotoStoryboard', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct detailedPhotoStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DetailedPhotoViewController

      let bundle = R.hostingBundle
      let name = "DetailedPhotoStoryboard"

      static func validate() throws {
        if UIKit.UIImage(named: "eyeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eyeIcon' is used in storyboard 'DetailedPhotoStoryboard', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "photo") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'photo' is used in storyboard 'DetailedPhotoStoryboard', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "logo1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo1' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainGalleryStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainGalleryViewController

      let bundle = R.hostingBundle
      let name = "MainGalleryStoryboard"

      static func validate() throws {
        if UIKit.UIImage(named: "ErrorIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ErrorIcon' is used in storyboard 'MainGalleryStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct rootStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController

      let bundle = R.hostingBundle
      let name = "RootStoryboard"

      static func validate() throws {
        if UIKit.UIImage(named: "Home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home' is used in storyboard 'RootStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Photo' is used in storyboard 'RootStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User' is used in storyboard 'RootStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signInStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SignInViewController

      let bundle = R.hostingBundle
      let name = "SignInStoryboard"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signUp: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SignUpViewController

      let bundle = R.hostingBundle
      let name = "SignUp"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct userProfileStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UserProfileViewController

      let bundle = R.hostingBundle
      let name = "UserProfileStoryboard"

      static func validate() throws {
        if UIKit.UIImage(named: "ErrorIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ErrorIcon' is used in storyboard 'UserProfileStoryboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PhotoIcon-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PhotoIcon-1' is used in storyboard 'UserProfileStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct welcomeStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "WelcomeStoryboard"
      let welcomeId = StoryboardViewControllerResource<WelcomeController>(identifier: "welcomeId")

      func welcomeId(_: Void = ()) -> WelcomeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeId)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in storyboard 'WelcomeStoryboard', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.welcomeStoryboard().welcomeId() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeId' could not be loaded from storyboard 'WelcomeStoryboard' as 'WelcomeController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
